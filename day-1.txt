use of pointers

useful in arrays,strings and functions
dynamic memory allocation
used to optimize de code
will make the program faster
use less memory

to convert static array into dynamic array we use pointers with the help of dynmaic memory allocation

P1+p2 INVALID
P2-P1 - VALID



* % ++ -- ALL VALID

Types of pointers
Double pointers
Constant pointers
Dangling Pointers


instead of using static mem allocation we are going for dynamic memory allocation.
recently in static allocation irrespective of space usage memmory will be blocked.so it will affect the efficency.
in dynamic memory allocation memory being allocated during run time and we can very well increase or decrese the memory according to our requirements.

1.malloc()-allocate request size and points to first byte location,block of memory being allocated by one peice
2.calloc()-allocate space for an array of elements,configiuos
3.realloc()-modify previously alocated space
4.free()-free a memory location

stack and heap 

in malloc once it is done all the ememory spaces will have garbage values.
wheras in calloc all the memory spaces are zeros

#include<stdio.h>
#include<stdlib.h>
int main()
{
int

a number should be a magical prime number

1.#include <stdio.h>
#include<stdlib.h>
int main()
{
    int *number = (int*)malloc(4*sizeof(int));
    int i;
    number[0]=1;
    number[1]=2;
    number[2]=3;
    printf("\nstored integers are ");
    for(i=0;i<4;i++)
    printf("\nnumber[%d]",i,number[i]);
    return 0;
}

    stored integers are 
number[0]
number[1]
number[2]
number[3]

----------------------------------------------
2.#include <stdio.h>
#include<stdlib.h>
#include<string.h>
int main()
{
    char *ptr;
    ptr = (char*)malloc(10);
    strcpy(ptr,"programming");
    printf("%s,address=%u\n",ptr,ptr);
    ptr=(char*) realloc(ptr,20);
    strcat(ptr,"in C");
    printf("%s,Address= %u\n",ptr,ptr);
    free(ptr);
    return 0;
}

    programming,address=2028163744
programmingin C,Address= 2028163744

----------------------------------------------
3.#include <stdio.h>
#include<stdlib.h>
int main()
{
    int n=10;
    int *p=malloc(n);
    if(p==NULL){
        printf("unable to load memory");
        return -1;
    }
    printf("allocated %d bytes of memory\n",n);
    printf("%p\t%p\t%p",p,p+1,p+2);
        return 0;
}

allocated 10 bytes of memory
0x5604cb8de2a0	0x5604cb8de2a4	0x5604cb8de2a8

-----------------------------------------------

DATA STRUCTURE

1.LINEAR
2.NON-LINEAR

LINKED LIST
it is a linear data structure 
best real time example -train,playlist.

consist of nodes
node-data part,link part
first node=head node
1.inser
2.delete
3.search

